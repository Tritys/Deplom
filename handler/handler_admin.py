from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, delete, update, func
from database.db import User, Category, Bouquet, Cart, Order, Promotion, OrderItem, get_admin_orders, update_order_status, AsyncSessionLocal
from database.db import AsyncSession
from sqlalchemy.future import select
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import joinedload
from keyboard.keyboard_admin import (
    admin_bouquets_kb, admin_promotions_kb,
    main_admin, profile_admin, get_categories_keyboard, get_orders_menu_keyboard
)

from aiogram.enums import ParseMode
from aiogram import Dispatcher
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import find_dotenv, load_dotenv, dotenv_values
import os
from aiogram.filters.base import Filter
from aiogram.filters.state import StateFilter
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)
load_dotenv(find_dotenv())
import keyboard.keyboard_admin as kb_admin

router_admin = Router()

ADMIN_ID1 = int(os.getenv("ADMIN_IDS"))

# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class IsAdminFilter(Filter):
    async def __call__(self, message: types.Message) -> bool:
        return message.from_user.id == ADMIN_ID1

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    
    AddBouquetID = State()
    AddBouquetName  = State()
    AddBouquetCategory = State()
    AddBouquetPrice  = State()
    AddBouquetDescription  = State()
    AddBouquetImageURL  = State()
    
    EditBouquetID = State()
    EditBouquetName = State()
    EditBouquetPrice = State()
    EditBouquetDescription = State()
    EditBouquetImageURL = State()
    
    DeleteBouquet = State()
    
    AddPromotionTitle = State()
    AddPromotionDescription = State()
    AddPromotionDiscount = State()
    AddPromotionStartDate = State()
    AddPromotionEndDate = State()
    
    EditPromotionID = State()
    EditPromotionTitle = State()
    EditPromotionDescription = State()
    EditPromotionDiscount = State()
    EditPromotionStartDate = State()
    EditPromotionEndDate = State()
        
    DeletePromotionID = State()
    
    WaitingForStatus = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    SearchOrderById = State()
    
# –ö–æ–º–∞–Ω–¥–∞ /moderator
@router_admin.message(Command('moderators'))
async def process_moderator(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=kb_admin.main_admin)

# –ú–µ–Ω—é
@router_admin.message(F.text == "–º–µ–Ω—é")
async def process_menu(message: types.Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=kb_admin.main_admin)

# –ü—Ä–æ—Ñ–∏–ª—å
@router_admin.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    async with AsyncSessionLocal() as db:
        user_id = message.from_user.id
        query = select(User).where(User.user_id == user_id)
        result = await db.execute(query)
        user = result.scalars().first()

        if user:
            await message.answer(
                f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"–í–∞—à ID: {user.user_id}\n"
                f"–ù–∏–∫–Ω–µ–π–º: {user.username}\n"
                f"–ò–º—è: {user.first_name}\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone}\n",
                reply_markup=kb_admin.profile_admin,
            )
        else:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start")

@router_admin.message(F.text == 'üíê –ë—É–∫–µ—Ç—ã')
async def add_bouquet(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –±—É–∫–µ—Ç–æ–≤:", reply_markup=admin_bouquets_kb())

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±—É–∫–µ—Ç–∞
@router_admin.callback_query(F.data == "add_bouquet")
async def add_bouquet_start(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –±—É–∫–µ—Ç–∞:")
    await state.set_state(AdminStates.AddBouquetID)
    
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±—É–∫–µ—Ç–∞
@router_admin.callback_query(F.data == "add_bouquet")
async def add_bouquet_start(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –±—É–∫–µ—Ç–∞:")
    await state.set_state(AdminStates.AddBouquetID)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ID –±—É–∫–µ—Ç–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
@router_admin.message(StateFilter(AdminStates.AddBouquetID))
async def add_bouquet_id(message: types.Message, state: FSMContext):
    try:
        bouquet_id = int(message.text)  # –ü—Ä—è–º–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 123")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è ID
    async with AsyncSessionLocal() as db:
        existing_bouquet = await db.execute(select(Bouquet).where(Bouquet.bouquet_id == bouquet_id))
        if existing_bouquet.scalars().first():
            await message.answer("‚ö†Ô∏è –ë—É–∫–µ—Ç —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

    await state.update_data(bouquet_id=bouquet_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:")
    await state.set_state(AdminStates.AddBouquetName)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±—É–∫–µ—Ç–∞
@router_admin.message(StateFilter(AdminStates.AddBouquetName))
async def add_bouquet_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = await get_categories_keyboard()
    if not keyboard:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await state.set_state(AdminStates.AddBouquetCategory)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router_admin.callback_query(F.data.startswith("category_"))
async def process_category_selection(callback: types.CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[1])
    except (IndexError, ValueError):
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.update_data(category_id=category_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±—É–∫–µ—Ç–∞:")
    await state.set_state(AdminStates.AddBouquetPrice)

@router_admin.message(StateFilter(AdminStates.AddBouquetPrice))
async def add_bouquet_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)  # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:")
        await state.set_state(AdminStates.AddBouquetDescription)
    except ValueError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Ü–µ–Ω—ã: {message.text}")
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@router_admin.message(StateFilter(AdminStates.AddBouquetDescription))
async def add_bouquet_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–∫–µ—Ç–∞: ")
    await state.set_state(AdminStates.AddBouquetImageURL)

@router_admin.message(StateFilter(AdminStates.AddBouquetImageURL))
async def add_bouquet_image_url(message: types.Message, state: FSMContext):
    if not message.text.startswith("http"):
        await message.answer("URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'http'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(image_url=message.text)
    data = await state.get_data()

    async with AsyncSessionLocal() as db:
        new_bouquet = Bouquet(
            category_id=data.get("category_id"),
            name=data["name"],
            price=data["price"],
            description=data["description"],
            image_url=data["image_url"]
        )
        db.add(new_bouquet)
        await db.commit()

    await message.answer("–ë—É–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.set_state(None)

@router_admin.message(Command("cancel"))
async def cancel_operation(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb_admin.main_admin)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–∫–µ—Ç–∞
@router_admin.callback_query(F.data == "edit_bouquet")
async def edit_bouquet_start(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –±—É–∫–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    await state.set_state(AdminStates.EditBouquetID)

@router_admin.message(StateFilter(AdminStates.EditBouquetID))
async def edit_bouquet_id(message: types.Message, state: FSMContext):
    try:
        bouquet_id = int(message.text)  # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª ID: {bouquet_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±—É–∫–µ—Ç —Å —Ç–∞–∫–∏–º ID
        async with AsyncSessionLocal() as db:
            existing_bouquet = await db.execute(select(Bouquet).where(Bouquet.bouquet_id == bouquet_id))
            existing_bouquet = existing_bouquet.scalars().first()

            if not existing_bouquet:
                await message.answer("–ë—É–∫–µ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±—É–∫–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(bouquet_id=bouquet_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:")
        await state.set_state(AdminStates.EditBouquetName)

    except ValueError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ ID: {message.text}")
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router_admin.message(StateFilter(AdminStates.EditBouquetName))
async def edit_bouquet_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –±—É–∫–µ—Ç–∞:")
    await state.set_state(AdminStates.EditBouquetPrice)

@router_admin.message(StateFilter(AdminStates.EditBouquetPrice))
async def edit_bouquet_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞:")
        await state.set_state(AdminStates.EditBouquetDescription)
    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router_admin.message(StateFilter(AdminStates.EditBouquetDescription))
async def edit_bouquet_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–∫–µ—Ç–∞:")
    await state.set_state(AdminStates.EditBouquetImageURL)

@router_admin.message(StateFilter(AdminStates.EditBouquetImageURL))
async def edit_bouquet_image_url(message: types.Message, state: FSMContext):    
    if not message.text.startswith("http"):
        await message.answer("URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'http'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(image_url=message.text)
    data = await state.get_data()

    async with AsyncSessionLocal() as db:
        await db.execute(
            update(Bouquet)
            .where(Bouquet.bouquet_id == data["bouquet_id"])
            .values(
                name=data["name"],
                price=data["price"],
                description=data["description"],
                image_url=data["image_url"]
            )
        )
        await db.commit()

    await message.answer("–ë—É–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
    await state.set_state(None)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±—É–∫–µ—Ç–∞
@router_admin.callback_query(F.data == "delete_bouquet")
async def delete_bouquet_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –±—É–∫–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(AdminStates.DeleteBouquet)

@router_admin.message(StateFilter(AdminStates.DeleteBouquet))
async def delete_bouquet_id(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if not message.text.isdigit():
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–≤–µ–ª–∏ –Ω–µ—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.", reply_markup=admin_bouquets_kb())
        return

    try:
        bouquet_id = int(message.text)
        async with AsyncSessionLocal() as db:
            existing_bouquet = await db.execute(select(Bouquet).where(Bouquet.bouquet_id == bouquet_id))
            existing_bouquet = existing_bouquet.scalars().first()

            if not existing_bouquet:
                await message.answer("–ë—É–∫–µ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return 

            await db.execute(
                delete(Bouquet)
                .where(Bouquet.bouquet_id == bouquet_id)
            )
            await db.commit()

        await message.answer("–ë—É–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        await state.set_state(None)  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router_admin.message(F.text == 'üéâ –ê–∫—Ü–∏–∏')
async def add_promotion(message: types.Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–π:", reply_markup=admin_promotions_kb())
    
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏
@router_admin.callback_query(F.data == "add_promotion")
async def add_promotion_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")
    await state.set_state(AdminStates.AddPromotionTitle)

@router_admin.message(StateFilter(AdminStates.AddPromotionTitle))
async def add_promotion_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:")
    await state.set_state(AdminStates.AddPromotionDescription)

@router_admin.message(StateFilter(AdminStates.AddPromotionDescription))
async def add_promotion_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):")
    await state.set_state(AdminStates.AddPromotionDiscount)

@router_admin.message(StateFilter(AdminStates.AddPromotionDiscount))
async def add_promotion_discount(message: types.Message, state: FSMContext):
    try:
        discount = float(message.text)
        await state.update_data(discount=discount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        await state.set_state(AdminStates.AddPromotionStartDate)
    except ValueError:
        await message.answer("–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router_admin.message(StateFilter(AdminStates.AddPromotionStartDate))
async def add_promotion_start_date(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        datetime.strptime(message.text, "%Y-%m-%d")
        await state.update_data(start_date=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
        await state.set_state(AdminStates.AddPromotionEndDate)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")

@router_admin.message(StateFilter(AdminStates.AddPromotionEndDate))
async def add_promotion_end_date(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        datetime.strptime(message.text, "%Y-%m-%d")
        await state.update_data(end_date=message.text)
        data = await state.get_data()

        async with AsyncSessionLocal() as db:
            new_promotion = Promotion(
                title=data["title"],
                description=data["description"],
                discount=data["discount"],
                start_date=data["start_date"],
                end_date=data["end_date"]
            )
            db.add(new_promotion)
            await db.commit()

        await message.answer("–ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await state.set_state(None)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ü–∏–π
@router_admin.callback_query(F.data == "edit_promotion")
async def edit_promotion_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∞–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    await state.set_state(AdminStates.EditPromotionID)

@router_admin.message(StateFilter(AdminStates.EditPromotionID))
async def edit_promotion_id(message: types.Message, state: FSMContext):
    try:
        promotion_id = int(message.text)
        async with AsyncSessionLocal() as db:
            promotion = await db.execute(select(Promotion).where(Promotion.promotion_id == promotion_id))
            promotion = promotion.scalars().first()
            if not promotion:
                await message.answer("–ê–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            await state.update_data(promotion_id=promotion_id)
            await state.update_data(title=promotion.title)
            await state.update_data(description=promotion.description)
            await state.update_data(discount=promotion.discount)
            await state.update_data(start_date=promotion.start_date)
            await state.update_data(end_date=promotion.end_date)

            await message.answer("–ê–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è):")
            await state.set_state(AdminStates.EditPromotionTitle)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: ID –∞–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router_admin.message(StateFilter(AdminStates.EditPromotionTitle))
async def edit_promotion_title(message: types.Message, state: FSMContext):
    if message.text.strip():
        await state.update_data(title=message.text)
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è):")
    await state.set_state(AdminStates.EditPromotionDescription)

@router_admin.message(StateFilter(AdminStates.EditPromotionDescription))
async def edit_promotion_description(message: types.Message, state: FSMContext):
    if message.text.strip():
        await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å–∫–∏–¥–∫—É (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è):")
    await state.set_state(AdminStates.EditPromotionDiscount)

@router_admin.message(StateFilter(AdminStates.EditPromotionDiscount))
async def edit_promotion_discount(message: types.Message, state: FSMContext):
    if message.text.strip():
        try:
            discount = float(message.text)
            await state.update_data(discount=discount)
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞: –°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è —Å–∫–∏–¥–∫–∞.")

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è):")
    await state.set_state(AdminStates.EditPromotionStartDate)

@router_admin.message(StateFilter(AdminStates.EditPromotionStartDate))
async def edit_promotion_start_date(message: types.Message, state: FSMContext):
    if message.text.strip():
        await state.update_data(start_date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è):")
    await state.set_state(AdminStates.EditPromotionEndDate)

@router_admin.message(StateFilter(AdminStates.EditPromotionEndDate))
async def edit_promotion_end_date(message: types.Message, state: FSMContext):
    if message.text.strip():
        await state.update_data(end_date=message.text)

    data = await state.get_data()

    async with AsyncSessionLocal() as db:
        promotion = await db.execute(select(Promotion).where(Promotion.promotion_id == data["promotion_id"]))
        promotion = promotion.scalars().first()

        promotion.title = data["title"] if data["title"] else promotion.title
        promotion.description = data["description"] if data["description"] else promotion.description
        promotion.discount = data["discount"] if data["discount"] else promotion.discount
        promotion.start_date = data["start_date"] if data["start_date"] else promotion.start_date
        promotion.end_date = data["end_date"] if data["end_date"] else promotion.end_date

        await db.commit()

    await message.answer("–ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    await state.set_state(None)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ü–∏–π
@router_admin.callback_query(F.data == "delete_promotion")
async def delete_promotion_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∞–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.DeletePromotionID)

@router_admin.message(StateFilter(AdminStates.DeletePromotionID))
async def delete_promotion_id(message: types.Message, state: FSMContext):
    try:
        promotion_id = int(message.text)
        async with AsyncSessionLocal() as db:
            promotion = await db.execute(select(Promotion).where(Promotion.promotion_id == promotion_id))
            promotion = promotion.scalars().first()
            if not promotion:
                await message.answer("–ê–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            await db.delete(promotion)
            await db.commit()

        await message.answer("–ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        await state.set_state(None)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: ID –∞–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏"
@router_admin.callback_query(F.data == "active_promotions")
async def view_active_promotions(callback: types.CallbackQuery):
    async with AsyncSessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.now().strftime("%Y-%m-%d")

        # –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π
        promotions = await db.execute(
            select(Promotion)
            .where(Promotion.start_date <= current_date)
            .where(Promotion.end_date >= current_date)
        )
        promotions = promotions.scalars().all()

        if not promotions:
            await callback.message.answer("üéÅ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∞–∫—Ü–∏—è–º–∏
        response = "üéÅ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏:</b>\n\n"
        for promotion in promotions:
            response += (
                f"üîπ <b>{promotion.title}</b>\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {promotion.description}\n"
                f"üí∏ –°–∫–∏–¥–∫–∞: {promotion.discount}%\n"
                f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç —Å {promotion.start_date} –ø–æ {promotion.end_date}\n\n"
            )

        await callback.message.answer(response, parse_mode=ParseMode.HTML)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
async def get_admin_orders(db: AsyncSession):
    result = await db.execute(
        select(Order)
        .options(joinedload(Order.items).joinedload(OrderItem.bouquet))  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    )
    return result.unique().scalars().all()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
def format_date(date_obj):
    return date_obj.strftime("%d.%m.%Y %H:%M")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async def update_order_status(db: AsyncSession, order_id: int, new_status: str):
    order = await db.execute(
        select(Order)
        .where(Order.order_id == order_id)
    )
    order = order.scalars().first()
    if order:
        order.status = new_status
        await db.commit()
        await db.refresh(order)
        return order
    return None

# –ó–∞–∫–∞–∑—ã
@router_admin.message(F.text == 'üì¶ –ó–∞–∫–∞–∑—ã')
async def show_orders_menu(message: types.Message):
    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏:", reply_markup=get_orders_menu_keyboard())
    

    
@router_admin.callback_query(F.data == "view_orders")
async def view_orders(callback: types.CallbackQuery):
    async with AsyncSessionLocal() as db:
        orders = await get_admin_orders(db)
        if orders:
            for order in orders:
                items_info = "–¢–æ–≤–∞—Ä—ã:\n"
                if order.items:
                    for item in order.items:
                        items_info += (
                            f"üîπ {item.bouquet.name} (x{item.quantity}) - {item.price} —Ä—É–±.\n"
                        )
                else:
                    items_info += "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.\n"

                await callback.message.answer(
                    f"–ó–∞–∫–∞–∑ ‚Ññ{order.order_id}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user_id}\n"
                    f"–°—É–º–º–∞: {order.total_price} —Ä—É–±.\n"
                    f"–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_type}\n"
                    f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
                    f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {format_date(order.created_at)}\n"
                    f"{items_info}"
                )
        else:
            await callback.message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            
@router_admin.callback_query(F.data == "search_order_by_id")
async def search_order_by_id(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(AdminStates.SearchOrderById)

@router_admin.message(AdminStates.SearchOrderById, F.text)
async def process_search_order_by_id(message: types.Message, state: FSMContext):
    try:
        order_id = int(message.text)
        async with AsyncSessionLocal() as db:
            order = await db.execute(
                select(Order)
                .options(joinedload(Order.items).joinedload(OrderItem.bouquet))
                .where(Order.order_id == order_id)
            )
            order = order.unique().scalars().first()

            if order:
                items_info = "–¢–æ–≤–∞—Ä—ã:\n"
                if order.items:
                    for item in order.items:
                        items_info += (
                            f"üîπ {item.bouquet.name} (x{item.quantity}) - {item.price} —Ä—É–±.\n"
                        )
                else:
                    items_info += "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.\n"

                await message.answer(
                    f"–ó–∞–∫–∞–∑ ‚Ññ{order.order_id}\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user_id}\n"
                    f"–°—É–º–º–∞: {order.total_price} —Ä—É–±.\n"
                    f"–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_type}\n"
                    f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
                    f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {format_date(order.created_at)}\n"
                    f"{items_info}"
                )
            else:
                await message.answer("–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await message.answer("ID –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()
            
@router_admin.callback_query(F.data == "change_order_status")
async def change_order_status(callback: types.CallbackQuery):
    async with AsyncSessionLocal() as db:
        orders = await get_admin_orders(db)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        buttons = []
        for order in orders:
            buttons.append([InlineKeyboardButton(
                text=f"–ó–∞–∫–∞–∑ ‚Ññ{order.order_id}",
                callback_data=f"change_order_status_{order.order_id}"
            )])
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=keyboard)

@router_admin.callback_query(F.data.startswith("change_order_status_"))
async def process_change_order_status(callback: types.CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])
    await state.update_data(order_id=order_id)
    await state.set_state(AdminStates.WaitingForStatus)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤—ã–ø–æ–ª–Ω–µ–Ω' –∏–ª–∏ '–æ—Ç–º–µ–Ω–µ–Ω'):")

@router_admin.message(AdminStates.WaitingForStatus, F.text)
async def save_changed_order_status(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get('order_id')
    if order_id is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    new_status = message.text
    async with AsyncSessionLocal() as db:
        order = await update_order_status(db, order_id, new_status)
        if order:
            await message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'.")
        else:
            await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router_admin.callback_query()
async def handle_unprocessed_callbacks(callback: types.CallbackQuery):
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@router_admin.message()
async def handle_unknown_commands(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")








# # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# @router_admin.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
# async def show_statistics(message: types.Message):
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
#     if message.from_user.id != ADMIN_ID1:
#         return
    
#     async with AsyncSessionLocal() as session:
#         try:
#             # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
#             total_orders = await session.execute(select(func.count(Order.order_id)))
#             total_orders = total_orders.scalar()
            
#             # –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂
#             total_sales = await session.execute(select(func.sum(Order.total_price)))
#             total_sales = total_sales.scalar() or 0  # –ï—Å–ª–∏ —Å—É–º–º–∞ NULL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
            
#             # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#             total_users = await session.execute(select(func.count(User.user_id)))
#             total_users = total_users.scalar()
            
#             # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
#             yesterday = datetime.now() - timedelta(days=1)
#             recent_orders = await session.execute(
#                 select(func.count(Order.order_id))
#                 .where(Order.created_at >= yesterday)
#             )
#             recent_orders = recent_orders.scalar()
            
#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#             stats_text = f"""
# üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞*

# üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}
# üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {total_sales:.2f}‚ÇΩ
# üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
# üïí –ó–∞–∫–∞–∑–æ–≤ –∑–∞ 24 —á–∞—Å–∞: {recent_orders}
#             """
            
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
#             await message.answer(stats_text, reply_markup=kb_admin.main1_admin)
        
#         except Exception as e:
#             # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
#             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
#             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# @router_admin.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
# async def manage_users(message: types.Message):
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
#     if message.from_user.id != ADMIN_ID1:
#         return
    
#     async with AsyncSessionLocal() as session:
#         try:
#             # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#             total_users = await session.execute(select(func.count(User.user_id)))
#             total_users = total_users.scalar()
            
#             # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#             active_users = await session.execute(
#                 select(func.count(User.user_id))
#                 .where(User.is_active == True)
#             )
#             active_users = active_users.scalar()
            
#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#             users_text = f"""
# üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*

# üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
# ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_users}
# ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {total_users - active_users}
#             """
            
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
#             await message.answer(users_text, reply_markup=kb_admin.main1_admin)
        
#         except Exception as e:
#             # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
#             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
#             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")