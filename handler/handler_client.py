from aiogram import Router, F, types
import io
from sqlalchemy.orm import selectinload
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import Message, CallbackQuery
from sqlalchemy import update, delete, select, func
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold, hunderline
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy.future import select
from aiogram.types import InputMediaPhoto, InputFile
from database.db import  get_user
from database.db import User, Category, Bouquet, Cart, Order, OrderItem
import logging
from keyboard.keyboard_client import You_tube, get_bouquet_kd, Website, get_cart_keyboard, get_payment_keyboard, get_delivery_keyboard, help_keyboard, promotions, contacts
from database.db import AsyncSessionLocal
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from aiogram import Bot
import os
import logging
from datetime import datetime

router_client = Router()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
import keyboard.keyboard_client as kb

ADMIN_CHAT_ID = int(os.getenv("ADMIN_IDS"))

async def notify_admin(bot: Bot, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    try:
        await bot.send_message(ADMIN_CHAT_ID, message)
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        if "chat not found" in str(e):
            logger.error(f"–ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ chat_id –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")



# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderState(StatesGroup):
    choosing_delivery = State()
    choosing_payment = State()


# –°—Ç–∞—Ä—Ç
@router_client.message(Command('start'))
async def proess_conact(message: types.Message, state: FSMContext):
    async with AsyncSessionLocal() as db:
        user_id = message.from_user.id
        user = await get_user(db, user_id)
        if user:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user.username}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=kb.main)
        else:
            new_user = User(
                user_id=user_id,
                first_name=message.from_user.first_name,
                username=message.from_user.username,
                phone=None
            )
            db.add(new_user)
            await db.commit()
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=kb.contact)

@router_client.message(F.contact)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä –≤–º–µ—Å—Ç–æ content_types
async def process_contact(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {message.contact}")
    
    if not message.contact:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ.")
        return

    async with AsyncSessionLocal() as db:
        user_id = message.from_user.id
        phone_number = message.contact.phone_number

        try:
            query = select(User).where(User.user_id == user_id)
            result = await db.execute(query)
            user = result.scalars().first()

            if user:
                user.phone = phone_number
                await db.commit()
                await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ‚úÖ", reply_markup=kb.menu)
            else:
                new_user = User(
                    user_id=user_id,
                    first_name=message.from_user.first_name,
                    username=message.from_user.username,
                    phone=phone_number
                )
                db.add(new_user)
                await db.commit()
                await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ‚úÖ", reply_markup=kb.menu)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            await db.rollback()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
# –ú–µ–Ω—é
@router_client.message(F.text == "–ú–µ–Ω—é" or F.text == "üîô –ú–µ–Ω—é")
async def menu(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ", reply_markup=kb.main)
    
# –ú–µ–Ω—é
@router_client.message(F.data.startswith("menu_"))
async def menu(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ", reply_markup=kb.main)

# –ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç
@router_client.message(F.text == "–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç" or F.data.startswith("categorys"))
async def show_categories(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.category1)
    
async def save_edited_promotion(event, data):
    try:
        promotion_id = data.get('promotion_id')
        if promotion_id is None:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            logger.error("promotion_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö")
            await event.answer("–û—à–∏–±–∫–∞: promotion_id –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ promotion_id
        # –ù–∞–ø—Ä–∏–º–µ—Ä:
        # promotion = await get_promotion_by_id(promotion_id)
        # if promotion:
        #     await update_promotion(promotion, data)
        # else:
        #     await event.answer("–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_edited_promotion: {e}")
        await event.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
@router_client.callback_query(F.data.startswith("edit_promotion_"))
async def handle_edit_promotion(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ callback –∏–º–µ—é—Ç –≤–∏–¥ "edit_promotion_<promotion_id>"
        promotion_id = int(callback.data.split("_")[-1])
        if not promotion_id:
            await callback.answer("–û—à–∏–±–∫–∞: promotion_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º promotion_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(promotion_id=promotion_id)

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await save_edited_promotion(callback, await state.get_data())

    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
value2 = ['–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏–µ', '8 –º–∞—Ä—Ç–∞', '–≤ –∫–æ—Ä–∑–∏–Ω–µ', '–≤ –∫–æ—Ä–æ–±–∫–µ', 
          '–ú—É–∂—Å–∫–∏–µ', '–°–≤–∞–¥–µ–±–Ω—ã–µ', '–°–ø–∞—Å–∏–±–æ', '–í–º–µ—Å—Ç–æ –∏–∑–≤–∏–Ω–µ–Ω–∏–π', '–î–µ–Ω—å –º–∞—Ç–µ—Ä–∏', '–ú–æ–Ω–æ–±—É–∫–µ—Ç—ã', '–¢—Ä–∞—É—Ä–Ω—ã–µ', '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ']

value1 = ['–†–æ–∑—ã', '–¢—é–ª—å–ø–∞–Ω—ã', '–•—Ä–∏–∑–∞–Ω—Ç–µ–º—ã', '–†–æ–º–∞—à–∫–∏', '–õ–∏–ª–∏–∏', '–ì–æ—Ä—Ç–µ–Ω–∑–∏–∏', '–ò—Ä–∏—Å—ã', '–ù–∞—Ä—Ü–∏—Å—Å—ã', '–ü–∏–æ–Ω—ã', '–≠—É—Å—Ç–æ–º–∞', '–¢—Ä–∞—É—Ä–Ω—ã–µ', '–°–æ—Å—Ç–∞–≤–Ω—ã–µ']

@router_client.message(F.text.in_(value2 + value1) or F.data.startswith("category"))
# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def handle_category1(message: types.Message, state: FSMContext):
     async with AsyncSessionLocal() as db:
        try:
            category_name = message.text
            result = await db.execute(select(Category).filter(Category.name == category_name))
            category = result.scalars().first()

            if category:
                result = await db.execute(select(Bouquet).filter(Bouquet.category_id == category.category_id))
                bouquets = result.scalars().all()

                if bouquets:
                    bouquet = bouquets[0]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –±—É–∫–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if bouquet.image_url:
                        await message.answer_photo(
                            photo=bouquet.image_url,
                            caption=f"–ë—É–∫–µ—Ç: {bouquet.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {bouquet.description}\n–¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.",
                            reply_markup=get_bouquet_kd(bouquet.bouquet_id, category.category_id)
                        )
                    else:
                        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await message.answer(
                            f"–ë—É–∫–µ—Ç: {bouquet.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {bouquet.description}\n–¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.\n\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
                            reply_markup=get_bouquet_kd(bouquet.bouquet_id, category.category_id)
                        )
                else:
                    await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤.")
            else:
                await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ value2
@router_client.message(F.text.in_(value2 + value1))
async def handle_category_selection(message: types.Message):
    await handle_category1(message)  # –ü–µ—Ä–µ–¥–∞–µ–º category_name

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def handle_category(message: types.Message):
    async with AsyncSessionLocal() as db:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        try:
            category_name = message.text  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            result = await db.execute(select(Category).filter(Category.name == category_name))
            category = result.scalars().first()

            if category:
                result = await db.execute(select(Bouquet).filter(Bouquet.category_id == category.category_id))
                bouquets = result.scalars().all()

                if bouquets:
                    bouquet = bouquets[0]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –±—É–∫–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    await message.answer_photo(
                        photo=bouquet.image_url,  # –ï—Å–ª–∏ –µ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        caption=f"–ë—É–∫–µ—Ç: {bouquet.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {bouquet.description}\n–¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.",
                        reply_markup=get_bouquet_kd(bouquet.bouquet_id, category.category_id)
                    )
                else:
                    await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤.")
            else:
                await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")



# –õ–∏—Å—Ç–∞–Ω–∏–µ –±—É–∫–µ—Ç–æ–≤
@router_client.callback_query(F.data.startswith("prev_") | F.data.startswith("next_"))
async def navigate_bouquets(callback: CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
            data = callback.data.split("_")
            action = data[0]  # "prev" –∏–ª–∏ "next"
            bouquet_id = int(data[1])  # ID —Ç–µ–∫—É—â–µ–≥–æ –±—É–∫–µ—Ç–∞
            category_id = int(data[2])  # ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—É–∫–µ—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            result = await db.execute(select(Bouquet).filter(Bouquet.category_id == category_id))
            bouquets = result.scalars().all()
            
            # –ï—Å–ª–∏ –±—É–∫–µ—Ç–æ–≤ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not bouquets:
                await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±—É–∫–µ—Ç–æ–≤.")
                return

            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –±—É–∫–µ—Ç–∞
            current_index = next((i for i, b in enumerate(bouquets) if b.bouquet_id == bouquet_id), 0)
            
            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
            if action == "prev":
                new_index = (current_index - 1) % len(bouquets)
            else:
                new_index = (current_index + 1) % len(bouquets)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±—É–∫–µ—Ç
            new_bouquet = bouquets[new_index]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if new_bouquet.image_url:
                # –ï—Å–ª–∏ image_url - —ç—Ç–æ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if isinstance(new_bouquet.image_url, str):
                    media = InputMediaPhoto(
                        media=new_bouquet.image_url,
                        caption=f"–ë—É–∫–µ—Ç: {new_bouquet.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {new_bouquet.description}\n–¶–µ–Ω–∞: {new_bouquet.price} —Ä—É–±."
                    )
                # –ï—Å–ª–∏ image_url - —ç—Ç–æ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ InputFile
                else:
                    image_file = InputFile(io.BytesIO(new_bouquet.image_url), filename="bouquet.jpg")
                    media = InputMediaPhoto(
                        media=image_file,
                        caption=f"–ë—É–∫–µ—Ç: {new_bouquet.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {new_bouquet.description}\n–¶–µ–Ω–∞: {new_bouquet.price} —Ä—É–±."
                    )
            else:
                await callback.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–¥–∏–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback.message.edit_media(
                media=media,
                reply_markup=get_bouquet_kd(new_bouquet.bouquet_id, category_id)
            )
        except Exception as e:
            await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
@router_client.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:
        try:
            bouquet_id = int(callback.data.split("_")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º bouquet_id
            user_id = callback.from_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –±—É–∫–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_item_query = select(Cart).where(
                Cart.user_id == user_id,
                Cart.bouquet_id == bouquet_id
            )
            cart_item_result = await db.execute(cart_item_query)
            cart_item = cart_item_result.scalars().first()

            if cart_item:
                # –ï—Å–ª–∏ –±—É–∫–µ—Ç —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                cart_item.quantity += 1
            else:
                # –ï—Å–ª–∏ –±—É–∫–µ—Ç–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                cart_item = Cart(user_id=user_id, bouquet_id=bouquet_id, quantity=1)
                db.add(cart_item)

            await db.commit()
            

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
            # await callback.message.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π
            # await show_cart(callback.message, state=state)

            await callback.answer("–ë—É–∫–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        except Exception as e:
            await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –Ω–∞–∑–∞–¥ –≤ –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç
@router_client.message(F.text == "–Ω–∞–∑–∞–¥")
async def show_categories6(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.category1)
    
# –±–æ–ª—å—à–∏–µ –±—É–∫–µ—Ç—ã
@router_client.message(F.text == "–ë–æ–ª—å—à–∏–µ –±—É–∫–µ—Ç—ã")
async def show_categories7(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–æ–π –±—É–∫–µ—Ç:", reply_markup=kb.category2)

# –ü—Ä–æ—Ñ–∏–ª—å
@router_client.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as db:
        user_id = message.from_user.id

        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        query = select(User).where(User.user_id == user_id)
        result = await db.execute(query)
        user = result.scalars().first()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user:
            await message.answer(
                f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"–í–∞—à ID: {user.user_id}\n"
                f"–ù–∏–∫–Ω–µ–π–º: {user.username}\n"
                f"–ò–º—è: {user.first_name}\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.phone}\n",
                reply_markup=kb.profile,
            )
        else:
            await message.answer(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start"
            )

# # –ê–∫—Ü–∏–∏
# @router_client.message(F.text == "üéÅ –ê–∫—Ü–∏–∏")
# async def show_promotions(message: Message):
#     async with AsyncSessionLocal() as db:
#         active_promos = await db.execute(
#             select(Promotion)
#             .where(Promotion.end_date >= func.now())
#         )
#         promos = active_promos.scalars().all()
        
#         if not promos:
#             await message.answer(
#                 "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π –Ω–µ—Ç.\n"
#                 "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
#                 reply_markup=promotions
#             )
#             return
        
#         promos_text = "üéÅ *–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ü–∏–∏*\n\n"
#         for promo in promos:
#             promos_text += f"""
# üéâ {promo.title}
# üìù {promo.description}
# üí∞ –°–∫–∏–¥–∫–∞: {promo.discount}%
# üìÖ –î–æ: {promo.end_date}
#             """
        
#         await message.answer(promos_text, reply_markup=promotions)


# –ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞
@router_client.message(F.text == "üìç –ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞")
async def show_categories2(message: Message):
    await message.answer('–ù–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ üìç–∞–¥—Ä–µ—Å—É: —É–ª. –¶–≤–µ—Ç–æ—á–Ω–∞—è, –¥. 1\n–†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å \n–ü–Ω-–ü—Ç: 9:00 - 21:00 \n–°–±-–í—Å: 10:00 - 20:00 \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ 87369874326', reply_markup=kb.shop_address)

# –û –º–∞–≥–∞–∑–∏–Ω–µ
@router_client.message(F.text == "–û –º–∞–≥–∞–∑–∏–Ω–µ ‚ÑπÔ∏è")
async def show_categories3(message: Message):
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç
    website_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://–≤–∞—à-—Å–∞–π—Ç.com")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        '–í—Å—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ:',
        reply_markup=website_kb
    )

#–ö–æ—Ä–∑–∏–Ω–∞
@router_client.message(lambda message: message.text == "–ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message, state: FSMContext):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as db:
        try:
            user_id = message.from_user.id

            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤
            cart_query = (
                select(Cart)
                .where(Cart.user_id == user_id)
                .options(selectinload(Cart.bouquet))  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã Bouquet
            )
            cart_result = await db.execute(cart_query)
            cart_items = cart_result.scalars().all()

            # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
            if not cart_items:
                await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
                return

            total_price = 0
            cart_text = hunderline("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:") + "\n\n"

            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
            for item in cart_items:
                if item.bouquet:
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É (—É–∂–µ float)
                    price = item.bouquet.price if item.bouquet.price is not None else 0
                    quantity = item.quantity if item.quantity is not None else 0

                    cart_text += (
                        f"{hbold(item.bouquet.name)} - {price} —Ä—É–±. x {quantity}\n"
                    )
                    total_price += price * quantity
                else:
                    cart_text += f"{hbold('–ë—É–∫–µ—Ç —É–¥–∞–ª–µ–Ω')} (ID: {item.bouquet_id})\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            cart_text += hunderline(f"–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer(
                cart_text,
                reply_markup=get_cart_keyboard(cart_items),
                parse_mode="HTML"
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            await state.set_state(OrderState.choosing_delivery)

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}")

async def get_cart_data(user_id: int, db: AsyncSession):
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤
    cart_query = (
        select(Cart)
        .where(Cart.user_id == user_id)
        .options(selectinload(Cart.bouquet))  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã Bouquet
    )
    cart_result = await db.execute(cart_query)
    cart_items = cart_result.scalars().all()

    # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
    if not cart_items:
        return None, None

    total_price = 0
    cart_text = hunderline("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:") + "\n\n"

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    for item in cart_items:
        if item.bouquet:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É (—É–∂–µ float)
            price = item.bouquet.price if item.bouquet.price is not None else 0
            quantity = item.quantity if item.quantity is not None else 0

            cart_text += (
                f"{hbold(item.bouquet.name)} - {price} —Ä—É–±. x {quantity}\n"
            )
            total_price += price * quantity
        else:
            cart_text += f"{hbold('–ë—É–∫–µ—Ç —É–¥–∞–ª–µ–Ω')} (ID: {item.bouquet_id})\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    cart_text += hunderline(f"–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±.")

    return cart_text, get_cart_keyboard(cart_items)

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@router_client.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:
        try:
            user_id = callback.from_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart_query = (
                select(Cart)
                .where(Cart.user_id == user_id)
                .options(selectinload(Cart.bouquet))  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã Bouquet
            )
            cart_result = await db.execute(cart_query)
            cart_items = cart_result.scalars().all()

            # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
            if not cart_items:
                await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(cart_items=cart_items)

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=get_delivery_keyboard())
            await state.set_state(OrderState.choosing_delivery)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router_client.callback_query(F.data.startswith("increase_"))
async def increase_quantity(callback: CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º bouquet_id –∏–∑ callback.data
            try:
                bouquet_id = int(callback.data.split("_")[1])
            except (IndexError, ValueError):
                await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
                return

            user_id = callback.from_user.id

            # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
            cart_item_query = select(Cart).where(
                Cart.user_id == user_id,
                Cart.bouquet_id == bouquet_id
            )
            cart_item_result = await db.execute(cart_item_query)
            cart_item = cart_item_result.scalars().first()

            if cart_item:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
                cart_item.quantity += 1
                await db.commit()

                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                cart_text, cart_keyboard = await get_cart_data(user_id, db)

                if cart_text and cart_keyboard:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.edit_text(
                        cart_text,
                        reply_markup=cart_keyboard,
                        parse_mode="HTML"
                    )
                else:
                    await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            else:
                await callback.answer("–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ increase_quantity: {e}")
            await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            
@router_client.callback_query(F.data.startswith("decrease_"))
async def decrease_quantity(callback: types.CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:
        try:
            bouquet_id = int(callback.data.split("_")[1])
            user_id = callback.from_user.id

            # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
            cart_item_query = select(Cart).where(
                Cart.user_id == user_id,
                Cart.bouquet_id == bouquet_id
            )
            cart_item_result = await db.execute(cart_item_query)
            cart_item = cart_item_result.scalars().first()

            if cart_item:
                if cart_item.quantity > 1:
                    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ 1
                    cart_item.quantity -= 1
                else:
                    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ 1, —É–¥–∞–ª—è–µ–º –±—É–∫–µ—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
                    await db.execute(
                        delete(Cart)
                        .where(Cart.user_id == user_id, Cart.bouquet_id == bouquet_id)
                    )
                await db.commit()

                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                cart_text, cart_keyboard = await get_cart_data(user_id, db)

                if cart_text and cart_keyboard:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.edit_text(
                        cart_text,
                        reply_markup=cart_keyboard,
                        parse_mode="HTML"
                    )
                else:
                    await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
            else:
                await callback.answer("–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router_client.callback_query(F.data.startswith("remove_"))
async def remove_from_cart(callback: CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as db:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º bouquet_id –∏–∑ callback_data
            bouquet_id = int(callback.data.split("_")[1])
            user_id = callback.from_user.id

            # –£–¥–∞–ª—è–µ–º –±—É–∫–µ—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            await db.execute(
                delete(Cart)
                .where(Cart.user_id == user_id, Cart.bouquet_id == bouquet_id)
            )
            await db.commit()

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            cart_text, cart_keyboard = await get_cart_data(user_id, db)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_cart_data –≤–º–µ—Å—Ç–æ show_cart

            if cart_text and cart_keyboard:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_text(
                    cart_text,
                    reply_markup=cart_keyboard,
                    parse_mode="HTML"
                )
            else:
                # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        except Exception as e:
            await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –í—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
@router_client.callback_query(F.data.startswith("delivery_"), OrderState.choosing_delivery)
async def choose_delivery(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö
    delivery_type = callback.data.split("_")[1]  # delivery –∏–ª–∏ pickup
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    delivery_type_russian = {
        "delivery": "–î–æ—Å—Ç–∞–≤–∫–∞",
        "pickup": "–°–∞–º–æ–≤—ã–≤–æ–∑"
    }.get(delivery_type, delivery_type)
    
    await state.update_data(delivery_type=delivery_type, delivery_type_russian=delivery_type_russian)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤—ã–±–æ—Ä–µ
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {delivery_type_russian}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=get_payment_keyboard())
    await state.set_state(OrderState.choosing_payment)

#     # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
#     await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=get_payment_keyboard())
#     await state.set_state(OrderState.choosing_payment)

# @router_client.message(F.text == "–î–æ—Å—Ç–∞–≤–∫–∞")
# async def communication_with_administrator(message: Message):
#     await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", reply_markup=kb.delivery_keyboard)

# @router_client.message(F.text == "–ù–∞–ª–∏—á–Ω—ã–µ")
# async def communication_with_administrator(message: Message):
#     await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –±—É–∫–µ—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ", reply_markup=kb.menu)
    
# @router_client.message(F.text == "–ö–∞—Ä—Ç–∞")
# async def communication_with_administrator(message: Message):
#     await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –±—É–∫–µ—Ç –∫–∞—Ä—Ç–æ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è", reply_markup=kb.menu)
    
# @router_client.message(F.text == "–ü–µ—Ä–µ–≤–æ–¥")
# async def communication_with_administrator(message: Message):
#     await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –±—É–∫–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ —Å–∫–∏–Ω—É—Ç—å —á–µ–∫", reply_markup=kb.menu)
    


# –í—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã
@router_client.callback_query(F.data.startswith("payment_"), OrderState.choosing_payment)
async def choose_payment(callback: CallbackQuery, state: FSMContext, bot: Bot):
    payment_method = callback.data.split("_")[1]  # cash, card –∏–ª–∏ transfer
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    payment_method_russian = {
        "cash": "–ù–∞–ª–∏—á–Ω—ã–µ",
        "card": "–ö–∞—Ä—Ç–∞",
        "transfer": "–ü–µ—Ä–µ–≤–æ–¥"
    }.get(payment_method, payment_method)
    
    await state.update_data(payment_method=payment_method, payment_method_russian=payment_method_russian)

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    cart_items = data["cart_items"]
    delivery_type = data["delivery_type"]
    delivery_type_russian = data["delivery_type_russian"]
    payment_method = data["payment_method"]

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_price = sum(
        item.bouquet.price * item.quantity 
        for item in cart_items 
        if item.bouquet and item.bouquet.price is not None
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_text = "–í–∞—à –∑–∞–∫–∞–∑:\n\n"
    for item in cart_items:
        if item.bouquet:
            order_text += (
                f"{hbold(item.bouquet.name)} - {item.bouquet.price} —Ä—É–±. x {item.quantity}\n"
            )
        else:
            order_text += f"{hbold('–ë—É–∫–µ—Ç —É–¥–∞–ª–µ–Ω')} (ID: {item.bouquet_id})\n"

    order_text += hunderline(f"–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±.")
    order_text += f"\n–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_type_russian}"
    order_text += f"\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method_russian}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await callback.message.answer(
        order_text,
        parse_mode="HTML"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as db:
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            new_order = Order(
                user_id=callback.from_user.id,
                total_price=total_price,
                delivery_type=delivery_type,
                payment_method=payment_method,
                status="–ü—Ä–∏–Ω—è—Ç"
            )
            db.add(new_order)
            await db.commit()
            await db.refresh(new_order)
            order_id = new_order.order_id

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
            for item in cart_items:
                if item.bouquet:
                    order_item = OrderItem(
                        order_id=order_id,
                        bouquet_id=item.bouquet_id,
                        quantity=item.quantity,
                        price=item.bouquet.price
                    )
                    db.add(order_item)
            await db.commit()

            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            await db.execute(delete(Cart).where(Cart.user_id == callback.from_user.id))
            await db.commit()

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            user_query = await db.execute(
                select(User).where(User.user_id == callback.from_user.id))
            user = user_query.scalars().first()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_message = (
                f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!* ‚Ññ{order_id}\n\n"
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {callback.from_user.full_name} "
                f"(@{callback.from_user.username or '–Ω–µ—Ç username'})\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {user.phone if user and user.phone else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìÖ *–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üì¶ *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n"
            )
            
            for item in cart_items:
                if item.bouquet:
                    admin_message += f"  - {item.bouquet.name} x{item.quantity} = {item.bouquet.price * item.quantity} —Ä—É–±.\n"
            
            admin_message += (
                f"\nüí∞ *–ò—Ç–æ–≥–æ:* {total_price} —Ä—É–±.\n"
                f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* {delivery_type_russian}\n"
                f"üí≥ *–û–ø–ª–∞—Ç–∞:* {payment_method_russian}\n\n"
                f"üÜî *ID –∑–∞–∫–∞–∑–∞:* {order_id}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                if ADMIN_CHAT_ID:
                    await bot.send_message(
                        chat_id=ADMIN_CHAT_ID,
                        text=admin_message,
                        parse_mode="Markdown"
                    )
                else:
                    logger.warning("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏
    await callback.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router_client.message(F.text == "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
async def communication_with_administrator(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=kb.admin_contact)

@router_client.message(F.text == "–ü–æ–∑–≤–æ–Ω–∏—Ç—å")
async def call(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–∑–≤–æ–Ω–∏–≤ –Ω–∞ –Ω–æ–º–µ—Ä +723569227455", reply_markup=kb.contact_as)

@router_client.message(F.text == "–í —á–∞—Ç–µ")
async def In_chat(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–µ—Ç–µ–Ω–∑–∏—é @Sertaw", reply_markup=kb.contact_as)

# –°–∞–π—Ç
@router_client.message(F.text == "–°–∞–π—Ç")
async def Web_site(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç", reply_markup=Website())

# YouTube
@router_client.message(F.text == "YouTube")
async def You_Tube(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à YouTube –∫–∞–Ω–∞–ª", reply_markup=You_tube())

# @router_client.message()
# async def unknown_message(message: types.Message):
#     await message.answer("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")

# –ü–æ–º–æ—â—å
@router_client.message(F.text == "‚ùì –ü–æ–º–æ—â—å" or Command(help))
async def show_help(message: Message):
    help_text = """
‚ùì *–ü–æ–º–æ—â—å*

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:

üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ - —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
üí≥ –û–ø–ª–∞—Ç–∞ - —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
üìù –£—Å–ª–æ–≤–∏—è - —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã
‚ùì FAQ - —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    """
    
    await message.answer(help_text, reply_markup=help_keyboard)
    
# –ö–æ–Ω—Ç–∞–∫—Ç—ã
@router_client.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: Message):
    contacts_text = """
üìû *–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã*

üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (123) 45-67-89
‚úâÔ∏è Email: flower@shop.com
üìç –ê–¥—Ä–µ—Å: —É–ª. –¶–≤–µ—Ç–æ—á–Ω–∞—è, –¥. 1

‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:
–ü–Ω-–ü—Ç: 9:00 - 21:00
–°–±-–í—Å: 10:00 - 20:00

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:
    """
    
    await message.answer(contacts_text, reply_markup=kb.contacts)
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@router_client.message(lambda message: message.text in ['üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å', '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å', 'üì± WhatsApp', 'üì± Telegram', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
async def handle_buttons(message: types.Message):
    phone_number = "+1234567890"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    if message.text == 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å':
        await message.answer(f'–í—ã –º–æ–∂–∏—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É +7123456789', reply_markup=kb.menu)
    elif message.text == 'üì± WhatsApp':
        await message.answer(f"–ß—Ç–æ–±—ã –ø–æ–∑–≤–æ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ WhatsApp, –Ω–∞–∂–º–∏—Ç–µ [–∑–¥–µ—Å—å](https://wa.me/{phone_number}).", parse_mode='Markdown', reply_markup=kb.menu)
    elif message.text == 'üì± Telegram':
        await message.answer(f"–ß—Ç–æ–±—ã –ø–æ–∑–≤–æ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ Telegram, –Ω–∞–∂–º–∏—Ç–µ [–∑–¥–µ—Å—å](tg://user?id={phone_number}).", parse_mode='Markdown', reply_markup=kb.menu)
    elif message.text == '–ú–µ–Ω—é':
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é...", reply_markup=kb.menu)
    elif message.text == '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å':
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Group", reply_markup=kb.menu)
        
# –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
@router_client.message(F.text == "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã" or F.text == '‚ùì FAQ')
async def You_Tube(message: types.Message, state: FSMContext):
    # –¢–µ–∫—Å—Ç —Å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    faq_text = """
‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)</b>

1. <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?</b>
   - –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±—É–∫–µ—Ç–æ–≤, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –±—É–∫–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑.

2. <b>–ö–∞–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã?</b>
   - –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω –∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.

3. <b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞?</b>
   - –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã".

4. <b>–ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞?</b>
   - –î–∞, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∫—É—Ä—å–µ—Ä—É.

5. <b>–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?</b>
   - –û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –¥–æ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞ –∫—É—Ä—å–µ—Ä—É —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –∑–∞–∫–∞–∑—ã".

6. <b>–ï—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –º–æ–π –≥–æ—Ä–æ–¥?</b>
   - –ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –≤—Å–µ–º—É [–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞]. –î–ª—è –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –Ω–∞—Å.

7. <b>–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?</b>
   - –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.

8. <b>–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º?</b>
   - –î–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.

9. <b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å –æ —Å–∫–∏–¥–∫–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö?</b>
   - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–∫—Ü–∏–∏".

10. <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —è –ø–æ–ª—É—á–∏–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –±—É–∫–µ—Ç?</b>
    - –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏, –∏ –º—ã —Ä–µ—à–∏–º –ø—Ä–æ–±–ª–µ–º—É.

11. <b>–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è?</b>
    - –î–∞, –º—ã —Ä–∞–±–æ—Ç–∞–µ–º 24/7.

12. <b>–ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?</b>
    - –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ "–û—Ç–∑—ã–≤—ã".

13. <b>–ï—Å—Ç—å –ª–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã?</b>
    - –î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏—Ö —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç.

14. <b>–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?</b>
    - –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —á–∞—Ç-–±–æ—Ç –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É [–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞].

15. <b>–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å?</b>
    - –î–∞, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –¥–æ [–≤—Ä–µ–º—è].

<b>–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!</b>
    """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å FAQ
    await message.answer(faq_text, reply_markup=kb.menu, parse_mode="HTML")    

# –î–æ—Å—Ç–∞–≤–∫–∞
@router_client.message(F.text == "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞")
async def You_Tube(message: types.Message, state: FSMContext):
    delivery_text = """
üì¶ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ</b>

- –ú—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É [–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞].
- –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
- –î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –¥–æ [–≤—Ä–µ–º—è].
- –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã".

<b>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏!</b>
    """
    await message.answer(delivery_text, reply_markup=kb.menu, parse_mode="HTML")

# –û–ø–ª–∞—Ç–∞
@router_client.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∞")
async def You_Tube(message: types.Message, state: FSMContext):
    payment_text = """
üí≥ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ</b>

- –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω.
- –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.
- –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —á–µ–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É.

<b>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏!</b>
    """
    await message.answer(payment_text, reply_markup=kb.menu, parse_mode="HTML")

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@router_client.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def You_Tube(message: types.Message, state: FSMContext):
    support_text = """
üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>

- –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:
  - –¢–µ–ª–µ—Ñ–æ–Ω: [–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]
  - Email: [email]
  - –ß–∞—Ç-–±–æ—Ç: –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –∑–¥–µ—Å—å.

<b>–†–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ!</b>
    """
    await message.answer(support_text, reply_markup=kb.menu, parse_mode="HTML")
    
# –£—Å–ª–æ–≤–∏—è
@router_client.message(F.text == "üìù –£—Å–ª–æ–≤–∏—è")
async def You_Tube(message: types.Message, state: FSMContext):
    terms_text = """
üìù <b>–£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞</b>

- –ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ.
- –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Å –≤–∞–º–∏ —Å—Ä–æ–∫–∏.
- –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –¥–æ –ø–µ—Ä–µ–¥–∞—á–∏ –µ–≥–æ –∫—É—Ä—å–µ—Ä—É.
- –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.

<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!</b>
    """
    await message.answer(terms_text, reply_markup=kb.menu, parse_mode="HTML")